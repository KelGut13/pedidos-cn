const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const UsuarioModel = require('../models/UsuarioModel');
const { pool } = require('../config/database');

class AuthController {
    // Login de usuario
    static async login(req, res) {
        try {
            console.log('üîê Intento de login:', { email: req.body.email });
            
            const { email, password } = req.body;

            // Validaciones b√°sicas
            if (!email || !password) {
                console.log('‚ùå Faltan datos:', { email: !!email, password: !!password });
                return res.status(400).json({
                    success: false,
                    error: 'Email y contrase√±a son requeridos'
                });
            }

            // Buscar personal por email
            console.log('üìß Buscando personal con email:', email);
            const query = 'SELECT * FROM personal WHERE email_pe = ?';
            const [personal] = await pool.execute(query, [email]);ryptjs');
const jwt = require('jsonwebtoken');
const UsuarioModel = require('../models/UsuarioModel');
const { pool } = require('../config/database');

class AuthController {
    // Login de usuario
    static async login(req, res) {
        try {
            console.log('üîê Intento de login:', { email: req.body.email });
            
            const { email, password } = req.body;

            // Validaciones b√°sicas
            if (!email || !password) {
                console.log('‚ùå Faltan datos:', { email: !!email, password: !!password });
                return res.status(400).json({
                    success: false,
                    error: 'Email y contrase√±a son requeridos'
                });
            }

        // Buscar personal por email
        console.log('ÔøΩ Buscando personal con email:', email);
        const query = 'SELECT * FROM personal WHERE email_pe = ?';
        const [personal] = await db.execute(query, [email]);
        
        console.log('üë• Personal encontrado:', personal.length);
        
        if (personal.length === 0) {
            console.log('‚ùå Personal no encontrado');
            return res.status(401).json({
                success: false,
                error: 'Credenciales inv√°lidas'
            });
        }
        
        const usuario = personal[0];
        console.log('üë§ Personal encontrado:', {
            id: usuario.ID_personal,
            email: usuario.email_pe,
            nombre: usuario.nombres_pe
        });
        
        // Verificar contrase√±a con bcrypt
        console.log('üîê Verificando contrase√±a...');
        let passwordValida = false;
        
        try {
            // Intentar verificar con bcrypt (para contrase√±as hasheadas)
            passwordValida = await bcrypt.compare(password, usuario.password_pe);
            console.log('‚úÖ Verificaci√≥n bcrypt exitosa:', passwordValida);
        } catch (bcryptError) {
            // Si bcrypt falla, probablemente la contrase√±a est√° en texto plano
            console.log('‚ö†Ô∏è Bcrypt fall√≥, verificando contrase√±a en texto plano:', bcryptError.message);
            passwordValida = (password === usuario.password_pe);
            console.log('üìù Verificaci√≥n texto plano:', passwordValida);
        }
        
        if (!passwordValida) {
            console.log('‚ùå Contrase√±a incorrecta');
            return res.status(401).json({
                success: false,
                error: 'Credenciales inv√°lidas'
            });
        }

        console.log('‚úÖ Login exitoso, generando token...');

        // Generar token JWT
        const token = jwt.sign(
            { 
                userId: usuario.ID_personal,
                email: usuario.email_pe,
                rol: 2 // Todos los del personal son administradores
            },
            process.env.JWT_SECRET || 'secreto_predeterminado',
            { expiresIn: '12h' }
        );

        // Preparar respuesta sin password
        const usuarioRespuesta = {
            ID_personal: usuario.ID_personal,
            ID_usuario: usuario.ID_usuario,
            nombres_pe: usuario.nombres_pe,
            primer_apellido_pe: usuario.primer_apellido_pe,
            segundo_apellido_pe: usuario.segundo_apellido_pe,
            email_pe: usuario.email_pe,
            telefono_pe: usuario.telefono_pe,
            ID_rol: 2,
            nombre_rol: "Administrador"
        };

        console.log('üéâ Login completado exitosamente para:', email);
        
        res.json({
            success: true,
            message: 'Login exitoso',
            usuario: usuarioRespuesta,
            token
        });
        } catch (error) {
            console.error('üí• Error en login:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor en autenticaci√≥n'
            });
        }
    }

    // Validar token
    static async validarToken(req, res) {
        try {
            const { token } = req.body;
            
            if (!token) {
                return res.status(400).json({
                    success: false,
                    error: 'Token no proporcionado'
                });
            }

            // Verificar token
            const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secreto_predeterminado');
            
            // Obtener usuario actualizado (por si ha cambiado algo)
            const usuario = await UsuarioModel.getUsuarioById(decoded.userId);
            
            if (!usuario) {
                return res.status(401).json({
                    success: false,
                    error: 'Usuario no encontrado'
                });
            }

            // Remover password de la respuesta
            const { password: _, ...usuarioSinPassword } = usuario;

            res.json({
                success: true,
                valid: true,
                usuario: usuarioSinPassword
            });
        } catch (error) {
            console.error('Error al validar token:', error);
            res.status(401).json({
                success: false,
                valid: false,
                error: 'Token inv√°lido o expirado'
            });
        }
    }
}

module.exports = AuthController;
